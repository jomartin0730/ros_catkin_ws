#include <ros/ros.h>
#include "std_msgs/String.h"
#include <visualization_msgs/Marker.h>
#include <stdio.h>

int main( int argc, char** argv ){
	ros::init(argc, argv, "turtle_marker");
	ros::NodeHandle nh;
	ros::Rate r(1);
	ros::Publisher marker_pub = nh.advertise<visualization_msgs::Marker>("visualization_marker", 1);

	uint32_t shape = visualization_msgs::Marker::CUBE;

	while (ros::ok()){
	visualization_msgs::Marker marker;
	
	marker.header.frame_id = "/cloud";
	marker.header.stamp = ros::Time::now();

	marker.ns = "turtle_marker";
	marker.id = 0;

	marker.type = shape;
	marker.action = visualization_msgs::Marker::ADD;

	marker.pose.position.x = 0;
	marker.pose.position.y = 0;
	marker.pose.position.z = 0;
	marker.pose.orientation.x = 0.0;
	marker.pose.orientation.y = 0.0;
	marker.pose.orientation.z = 0.0; 
	marker.pose.orientation.w = 1.0;

	marker.scale.x = 1.0;
	marker.scale.y = 1.0;
	marker.scale.z = 1.0;

	marker.color.r = 0.0f;
	marker.color.g = 1.0f;
	marker.color.b = 0.0f;
	marker.color.a = 1.0;

	marker.lifetime = ros::Duration();
	
	while (marker_pub.getNumSubscribers() < 1){
		if (!ros::ok())
			return 0;
		ROS_WARN_ONCE("Please create a subscriber to the marker");
		ros::Duration(1.0).sleep();
		}
	marker_pub.publish(marker);

//	SWITCH(SHAPE){
//		CASE VISUALIZATION_MSGS::MARKER::CUBE:
//			SHAPE = VISUALIZATION_MSGS::MARKER::SPHERE;
//			BREAK;
//		CASE VISUALIZATION_MSGS::MARKER::SPHERE:
//			SHAPE = VISUALIZATION_MSGS::MARKER::ARROW;
//			BREAK;
//		CASE VISUALIZATION_MSGS::MARKER::ARROW:
//			SHAPE = VISUALIZATION_MSGS::MARKER::CYLINDER;
//			BREAK;
//		CASE VISUALIZATION_MSGS::MARKER::CYLINDER:
//			SHAPE = VISUALIZATION_MSGS::MARKER::CUBE;
//			BREAK;
//		}
	r.sleep();
	}

}
